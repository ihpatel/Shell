#line 2 "lex.yy.cc"

#line 4 "lex.yy.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

#define YY_FLEX_LEX_COMPAT
extern int yylineno;
int yylineno = 1;

extern char yytext[];

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	if ( yyleng >= YYLMAX ) \
		YY_FATAL_ERROR( "token too large, exceeds YYLMAX" ); \
	yy_flex_strncpy( yytext, (yytext_ptr), yyleng + 1 ); \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 19
#define YY_END_OF_BUFFER 20
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[450] =
    {   0,
        0,    0,   20,   18,    2,    1,   18,   18,    6,   18,
        4,    3,   12,   18,   18,   10,   16,   18,   18,   17,
       12,   18,    0,   11,   18,   17,   12,   18,   18,   17,
       17,   17,    5,    7,    8,   12,   12,   12,   12,   18,
        0,   18,   17,   12,   14,   18,   16,   16,   16,   12,
       11,   18,   17,   11,   17,   17,   12,   11,   12,   12,
       12,   18,    0,   17,   14,   12,   18,    0,   18,   17,
       12,   15,   17,   17,    9,   12,   12,   12,   12,   14,
       18,   17,   17,   17,   14,   12,   12,   12,   12,   12,
       18,   16,   16,   16,   16,   12,   12,   12,   12,   18,

        0,   11,   18,   17,   12,   15,   17,   17,   12,   12,
       11,   12,   12,   14,   17,   17,   14,   12,   12,   12,
       12,   15,   18,   17,   17,   17,   15,   12,   12,   12,
       12,   12,   15,   15,   15,   12,   17,   12,   12,   18,
        0,   18,   17,   12,   14,   15,   17,   17,   12,   12,
       12,   12,   12,   18,   16,   16,   16,   12,   15,   16,
       16,   12,   12,   12,   12,   11,   15,   18,   17,   11,
       17,   17,   15,   12,   11,   12,   12,   12,   12,   15,
       11,   15,   15,   12,   17,   12,   12,   17,   12,   12,
       12,   15,   17,   15,   15,   15,   12,   12,   12,   12,

       12,   12,   12,   12,   12,   15,   15,   12,   14,   15,
       18,   17,   17,   17,   14,   15,   12,   12,   12,   12,
       12,   12,   15,   15,   15,   12,   14,   17,   12,   12,
       18,   16,   16,   16,   16,   15,   12,   12,   12,   12,
       12,   15,   15,   15,   12,   16,   12,   12,   15,   11,
       17,   15,   11,   15,   15,   12,   12,   11,   12,   12,
       12,   12,   11,   12,   12,   12,   15,   15,   12,   12,
       15,   12,   12,   12,   12,   12,   12,   15,   15,   15,
       12,   15,   15,   14,   17,   15,   15,   15,   14,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,

       15,   15,   12,   18,   16,   15,   15,   15,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   15,   15,   12,
       15,   12,   12,   11,   12,   12,   12,   12,   15,   11,
       15,   15,   12,   15,   15,   15,   15,   15,   12,   12,
       12,   12,   12,   12,   15,   15,   15,   12,   12,   12,
       12,   12,   12,   12,   15,   15,   15,   12,   14,   15,
       13,   15,   12,   12,   12,   12,   12,   12,   15,   15,
       15,   12,   15,   15,   11,   15,   15,   15,   12,   12,
       11,   12,   12,   12,   12,   15,   15,   15,   12,   12,
       12,   12,   12,   12,   15,   15,   15,   14,   15,   12,

       12,   12,   12,   12,   12,   12,   15,   15,   13,   15,
       15,   15,   15,   12,   12,   12,   12,   12,   12,   15,
       15,   15,   12,   11,   12,   12,   12,   12,   12,   12,
       15,   12,   12,   12,   12,   12,   12,   12,   15,   12,
       12,   12,   12,   12,   12,   12,   12,   12,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    5,    1,    6,    1,    7,    1,    8,
        9,    1,    1,    1,    1,    1,    1,    1,    1,   10,
        1,    1,    1,    1,    1,    1,    1,    1,    1,   11,
        1,   12,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,   13,    1,    1,    1,   14,    1,    1,   15,    1,

       16,    1,    1,    1,    1,    1,    1,    1,    1,    1,
       17,    1,    1,   18,   19,    1,   20,    1,    1,    1,
        1,    1,   21,   22,   23,   24,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[25] =
    {   0,
        1,    2,    3,    2,    1,    4,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1
    } ;

static const flex_int16_t yy_base[545] =
    {   0,
        0,    0,  213,   19, 4649, 4649,   40,   57,   74,   27,
       91,   21,  108,  129,   19,    0,  146,   29,  200,    0,
      163,  184,  200,   35,  183,  205,  226,  247,  268,  285,
      301,    0,    0,    0,  196,    0,  181,  318,    0,  339,
      187,  179,  360,  381,   46,   51,  398,  178,  415,  432,
     4649,  454,  477,  177,  173,  493,  514,    0,  172,  535,
        0,  556,  183,  577,    0,  598,  619,  164,  163,  641,
      663,  681,    0,  702,    0,  724,  742,  162,  758, 4649,
      780,  803,  161,  819,  160,  840,  159,  861,    0,    0,
       66,  882,  900,  158,  916,  933,  157,  950,    0,    0,

       50,    0,  156,  971,  994, 1017, 1033, 1054,    0, 1076,
        0,  152, 1092,  163, 1113, 1129,    0, 1150, 1171,    0,
        0,    0,    0,    0,  150, 1187, 1204,    0,  146, 1225,
        0, 1243, 1260,  145, 1277, 1294, 1310, 1326, 1347,    0,
       15,  144, 1369, 1392,    0, 1415, 1431, 1452,    0, 1474,
      143, 1490,    0,   67, 1511,  142, 1533, 1555, 1573, 1589,
     1610, 1632, 1650,  141, 1666,  138,   56,    0,    0,    0,
      139, 1682, 1703,    0,    0,  135, 1724,    0, 1746, 1767,
        0, 1788, 1809, 1830, 1846, 1867, 1888, 1910, 1931, 1952,
     1968,    0,    0, 1984, 2000,    0,    0,    0,  134, 2016,

     2033, 2050,  133, 2067,    0, 2088,    0, 2105,  127,   87,
     2127,    0,  128, 2145,    0, 2166,    0,  127, 2187,    0,
        0, 2209, 2230, 2251, 2272, 2293,    0, 2309, 2330, 2351,
     2369, 2390,    0,  126, 2407, 2424,    0,  125, 2445,    0,
     2463, 2480, 2497, 2514, 2531, 2547, 2564, 2585,   88,    0,
        0, 2607,  124,  123, 2623, 2645,    0,    0,  118, 2663,
     2684, 2705,    0, 2726, 2747,  117, 2769, 2787, 2803,    0,
     2824,    0, 2842,  116, 2858, 2879, 2896, 2917, 2939, 2961,
     2983,    0,  102,    0,    0, 3000, 3016,    0,  113, 3038,
        0,  111, 3056,    0, 3077,    0,  108, 3098,    0,    0,

     3120,    0, 3138, 3157,    0, 3173, 3189,    0,    0,    0,
      107, 3205, 3222,    0,  106, 3239,    0, 3260,    0, 3277,
     3298,    0, 3315,    0, 3331,    0, 3353,    0,    0,  105,
      104, 3376,    0, 3398, 3414, 3430,    0,  103, 3451,    0,
      102, 3473,    0,    0,  101,    0, 3495,    0, 3512, 3528,
        0,    0, 3550,    0,    0,   97, 3573,    0,   96, 3595,
        0, 3616,    0, 3633, 3649,    0, 3670,    0, 3692,   91,
     3714, 3736, 3754, 3770,   90, 3786,    0, 3807, 3828,    0,
        0,   89, 3850,    0, 3872,    0,    0,   88, 3888, 3904,
        0,    0,    0,    0, 3920, 3936,    0,   87, 3957, 3978,

        0,   86, 4000,    0,    0, 4022,    0,    0,    0, 4038,
     4054,    0, 4070, 4091,    0,   84, 4113,    0, 4131,    0,
        0,   79, 4147,   78, 4163,    0, 4184,    0,    0,   74,
       73, 4200, 4216,    0,   62,   56,    0,    0,   55, 4232,
     4248,    0,   45,    0,    0,   36,   28,   13, 4649, 4270,
     4274, 4278, 4282, 4286, 4290, 4294, 4298, 4302, 4306, 4310,
     4314, 4318, 4322, 4326, 4330, 4334, 4338, 4342, 4344, 4348,
     4352, 4356, 4360, 4364, 4368, 4372, 4376, 4380, 4384, 4388,
     4392, 4396, 4400, 4404, 4408, 4412, 4416, 4420, 4424, 4428,
     4432, 4436, 4440, 4444, 4448, 4452, 4456, 4460, 4464, 4468,

     4472, 4476, 4480, 4484, 4488, 4492, 4496, 4500, 4504, 4508,
     4512, 4516, 4520, 4524, 4528, 4532, 4536, 4540, 4544, 4548,
     4552, 4556, 4560, 4564, 4568, 4572, 4576, 4580, 4584, 4588,
     4592, 4596, 4600, 4604, 4608, 4612, 4616, 4620, 4624, 4628,
     4632, 4636, 4640, 4644
    } ;

static const flex_int16_t yy_def[545] =
    {   0,
      449,    1,  449,  450,  449,  449,  451,  450,  452,    8,
      452,   11,  453,  454,    8,   11,  455,    8,    8,   11,
      453,  451,  456,    8,   22,  457,  458,  459,  460,   11,
       11,   11,   11,   11,   11,   21,   21,  461,   21,  454,
      462,   40,  463,  464,    8,    8,  455,   47,  465,  466,
      449,  449,  457,   31,   53,   53,  458,   21,   57,  467,
       57,  459,  468,  469,   62,  470,  460,  471,   67,  472,
      473,  474,   11,  472,   11,  473,  461,   77,   77,  449,
      449,  463,   82,   82,   31,  464,   86,  475,   86,   21,
        8,  476,  465,   93,   93,  466,   96,  477,   96,   52,

      478,   67,   52,  479,  449,  480,   53,  479,  105,  467,
       77,  110,  110,  468,  469,  115,  115,  470,  481,  118,
      118,  482,   67,   74,   74,   74,  483,   76,   76,  484,
       76,  485,  474,  133,  483,  485,   74,   77,  484,   81,
      486,   81,  487,  449,   67,  488,   82,  487,  144,  475,
      150,  150,   77,    8,  476,  155,  489,  490,  491,   93,
      489,  490,  477,  163,  163,  492,  493,   52,  108,   74,
      108,  108,  494,  105,   76,  105,  495,  105,  496,  497,
      133,  497,  494,  496,  108,  498,  495,  499,  500,  500,
      190,  501,   74,  135,  135,  135,   76,  139,  139,  139,

      502,  485,  202,  502,  202,  503,  135,  139,  492,  504,
      449,  148,  148,  148,   74,  505,  144,  144,  506,  144,
       76,  507,  508,  508,  505,  507,  133,  148,  509,  506,
      510,  511,  161,  161,  161,  512,  162,  162,  513,  162,
      514,  515,  515,  512,  514,  161,  516,  513,  517,  501,
      108,  494,  195,  252,  252,  449,  187,  139,  187,  187,
      518,  519,  202,  519,  518,  264,  449,  252,  187,  190,
      520,  139,  502,  273,  273,  521,  273,  522,  522,  520,
      521,  133,  523,  501,  148,  225,  225,  225,  195,  449,
      230,  230,  230,  139,  524,  226,  226,  524,  226,  202,

      449,  225,  230,  510,  161,  244,  244,  244,  162,  248,
      248,  248,  525,  245,  245,  525,  245,  526,  244,  248,
      527,  187,  265,  273,  265,  265,  449,  265,  267,  279,
      267,  527,  327,  528,  280,  280,  280,  195,  529,  281,
      281,  529,  281,  202,  279,  280,  530,  230,  298,  298,
      298,  273,  449,  298,  301,  301,  530,  353,  279,  531,
      532,  533,  248,  316,  316,  316,  534,  316,  526,  369,
      533,  534,  535,  332,  336,  332,  332,  536,  537,  327,
      281,  327,  537,  327,  538,  267,  332,  336,  342,  342,
      342,  273,  281,  342,  357,  357,  357,  336,  539,  540,

      353,  353,  540,  353,  281,  541,  301,  357,  532,  371,
      371,  371,  244,  542,  372,  372,  542,  372,  543,  369,
      371,  376,  383,  390,  383,  383,  544,  327,  383,  390,
      396,  403,  403,  403,  390,  350,  353,  403,  411,  417,
      417,  417,  365,  372,  417,  425,  433,  441,    0,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,

      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449
    } ;

static const flex_int16_t yy_nxt[4674] =
    {   0,
        4,    5,    6,    5,    7,    8,    9,    4,    4,   10,
       11,   12,   13,   14,    4,    4,    4,    4,   15,    4,
        4,   16,    4,   17,   19,   20,   18,   34,  209,   20,
       20,   21,   35,  440,   18,   46,   18,  210,   33,   18,
       20,   23,   18,   23,   24,   25,   26,   18,  432,   18,
       26,   26,   27,   18,  166,   18,  423,   23,   18,   23,
      250,   26,   19,   20,   28,  364,   18,   20,   20,   21,
       91,   18,  167,   18,   18,  410,  349,   29,   20,   31,
       32,  231,  389,  154,   32,   32,   18,   18,   41,   23,
       41,   23,  250,  395,  389,   32,   31,   32,  389,  374,

      284,   32,   32,   41,  444,   41,  437,  335,  335,  428,
      335,  420,   32,   37,   38,  284,  278,  407,   38,   38,
       39,  278,  393,  194,  386,  278,  367,  363,  353,   38,
       41,  348,   41,  194,   42,   43,  339,  262,  322,   43,
       43,   44,   45,  321,  194,  309,  305,  290,  285,  122,
       43,   48,   49,  276,  272,  256,   49,   49,   50,  251,
      122,  248,  232,  230,  211,  206,  197,   49,   37,   38,
      193,  114,  187,   38,   38,   39,  168,  162,  161,  149,
       30,  148,  139,  123,   38,   23,  122,   23,   24,   25,
       26,  114,  109,  108,   26,   26,   27,   30,   92,   81,

       80,   76,   75,   52,   51,   26,   23,   18,   23,   54,
       55,   56,  449,  449,  449,   56,   56,  449,  449,  449,
      449,  449,  449,  449,  449,  449,   56,   23,  449,   23,
       58,   59,   60,  449,  449,  449,   60,   60,   61,  449,
      449,  449,  449,  449,  449,  449,  449,   60,   63,  449,
       63,  449,   19,   64,  449,   65,  449,   64,   64,   66,
      449,  449,  449,  449,  449,  449,  449,  449,   64,   68,
      449,   68,  449,   69,   70,  449,  449,  449,   70,   70,
       71,  449,  449,  449,  449,  449,  449,  449,  449,   70,
       72,   73,  449,  449,  449,   73,   73,  449,  449,  449,

      449,  449,  449,  449,  449,  449,   73,   73,  449,  449,
      449,   73,   73,  449,  449,  449,  449,  449,  449,  449,
      449,   74,   73,   78,   79,  449,  449,  449,   79,   79,
      449,  449,  449,  449,  449,  449,  449,  449,  449,   79,
       41,  449,   41,  449,   42,   43,  449,  449,  449,   43,
       43,   44,   45,  449,  449,  449,  449,  449,  449,  449,
       43,   41,  449,   41,  449,   83,   84,  449,  449,  449,
       84,   84,  449,   85,  449,  449,  449,  449,  449,  449,
      449,   84,   41,  449,   41,  449,   87,   88,  449,  449,
      449,   88,   88,   89,   90,  449,  449,  449,  449,  449,

      449,  449,   88,   48,   49,  449,  449,  449,   49,   49,
       50,  449,  449,  449,  449,  449,  449,  449,  449,   49,
       94,   95,  449,  449,  449,   95,   95,  449,  449,  449,
      449,  449,  449,  449,  449,  449,   95,   97,   98,  449,
      449,  449,   98,   98,   99,  449,  449,  449,  449,  449,
      449,  449,  449,   98,  100,  101,  449,  101,  102,  103,
      104,  100,  100,  100,  104,  104,  105,  100,  100,  100,
      100,  100,  100,  100,  100,  104,  106,  100,   23,  449,
       23,   54,   55,  107,  449,  449,  449,  107,  107,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  107,   56,

      449,  449,  449,   56,   56,  449,  449,  449,  449,  449,
      449,  449,  449,  449,   56,   23,  449,   23,   58,   59,
       60,  449,  449,  449,   60,   60,   61,  449,  449,  449,
      449,  449,  449,  449,  449,   60,   23,  449,   23,  111,
      112,  113,  449,  449,  449,  113,  113,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  113,   63,  449,   63,
      449,   19,   64,  449,   65,  449,   64,   64,   66,  449,
      449,  449,  449,  449,  449,  449,  449,   64,   63,  449,
       63,  449,   31,  116,  449,  117,  449,  116,  116,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  116,   63,

      449,   63,  449,   37,  119,  449,  120,  449,  119,  119,
      121,  449,  449,  449,  449,  449,  449,  449,  449,  119,
       68,  449,   68,  449,   69,   70,  449,  449,  449,   70,
       70,   71,  449,  449,  449,  449,  449,  449,  449,  449,
       70,   72,   68,  449,   68,  449,  125,  126,  449,  449,
      449,  126,  126,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  126,  127,   68,  449,   68,  449,  129,  130,
      449,  449,  449,  130,  130,  131,  449,  449,  449,  449,
      449,  449,  449,  449,  130,  132,  134,  135,  449,  449,
      449,  135,  135,  136,  449,  449,  449,  449,  449,  449,

      449,  449,  135,   68,  449,   68,  449,  125,  137,  449,
      449,  449,  137,  137,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  137,  127,   68,  449,   68,  449,  129,
      130,  449,  449,  449,  130,  130,  131,  449,  449,  449,
      449,  449,  449,  449,  449,  130,  132,   78,  138,  449,
      449,  449,  138,  138,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  138,   79,  449,  449,  449,   79,   79,
      449,  449,  449,  449,  449,  449,  449,  449,  449,   79,
      140,  141,  449,  141,  140,  142,  143,  140,  140,  140,
      143,  143,  144,  145,  140,  140,  140,  140,  140,  140,

      140,  143,  146,  140,   41,  449,   41,  449,   83,  147,
      449,  449,  449,  147,  147,  449,   85,  449,  449,  449,
      449,  449,  449,  449,  147,   84,  449,  449,  449,   84,
       84,  449,  449,  449,  449,  449,  449,  449,  449,  449,
       84,   41,  449,   41,  449,   87,   88,  449,  449,  449,
       88,   88,   89,   90,  449,  449,  449,  449,  449,  449,
      449,   88,   41,  449,   41,  449,  151,  152,  449,  449,
      449,  152,  152,  449,  153,  449,  449,  449,  449,  449,
      449,  449,  152,   68,  449,   68,  449,  156,  157,  449,
      449,  449,  157,  157,  158,  449,  449,  449,  449,  449,

      449,  449,  449,  157,  159,   94,  160,  449,  449,  449,
      160,  160,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  160,   95,  449,  449,  449,   95,   95,  449,  449,
      449,  449,  449,  449,  449,  449,  449,   95,   97,   98,
      449,  449,  449,   98,   98,   99,  449,  449,  449,  449,
      449,  449,  449,  449,   98,  164,  165,  449,  449,  449,
      165,  165,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  165,  101,  449,  101,  170,  171,  172,  449,  449,
      449,  172,  172,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  172,  173,  174,  101,  449,  101,  175,  176,

      177,  174,  174,  174,  177,  177,  178,  174,  174,  174,
      174,  174,  174,  174,  174,  177,  179,  174,   23,  449,
       23,  181,  182,  183,  449,  449,  449,  183,  183,  184,
      449,  449,  449,  449,  449,  449,  449,  449,  183,   56,
      449,  449,  449,   56,   56,  449,  449,  449,  449,  449,
      449,  449,  449,  449,   56,  101,  449,  101,  170,  171,
      185,  449,  449,  449,  185,  185,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  185,  173,   23,  449,   23,
      111,  112,  186,  449,  449,  449,  186,  186,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  186,  113,  449,

      449,  449,  113,  113,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  113,   63,  449,   63,  449,   31,  188,
      449,  117,  449,  188,  188,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  188,  116,  449,  449,  449,  116,
      116,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      116,   63,  449,   63,  449,   37,  119,  449,  120,  449,
      119,  119,  121,  449,  449,  449,  449,  449,  449,  449,
      449,  119,   63,  449,   63,  449,   78,  190,  449,  191,
      449,  190,  190,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  190,  126,  449,  449,  449,  126,  126,  449,

      449,  449,  449,  449,  449,  449,  449,  449,  126,  195,
      196,  449,  449,  449,  196,  196,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  196,   68,  449,   68,  449,
      199,  200,  449,  449,  449,  200,  200,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  200,  201,  203,  204,
      449,  449,  449,  204,  204,  205,  449,  449,  449,  449,
      449,  449,  449,  449,  204,  134,  135,  449,  449,  449,
      135,  135,  136,  449,  449,  449,  449,  449,  449,  449,
      449,  135,  195,  207,  449,  449,  449,  207,  207,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  207,  203,

      204,  449,  449,  449,  204,  204,  205,  449,  449,  449,
      449,  449,  449,  449,  449,  204,  126,  449,  449,  449,
      126,  126,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  126,   79,  449,  449,  449,   79,   79,  449,  449,
      449,  449,  449,  449,  449,  449,  449,   79,   68,  449,
       68,  449,  199,  208,  449,  449,  449,  208,  208,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  208,  201,
      141,  449,  141,  449,  213,  214,  449,  449,  449,  214,
      214,  449,  215,  449,  449,  449,  449,  449,  449,  449,
      214,  216,  217,  141,  449,  141,  217,  218,  219,  217,

      217,  217,  219,  219,  220,  221,  217,  217,  217,  217,
      217,  217,  217,  219,  222,  217,   41,  449,   41,  449,
      224,  225,  449,  449,  449,  225,  225,  226,  227,  449,
      449,  449,  449,  449,  449,  449,  225,   84,  449,  449,
      449,   84,   84,  449,  449,  449,  449,  449,  449,  449,
      449,  449,   84,  141,  449,  141,  449,  213,  228,  449,
      449,  449,  228,  228,  449,  215,  449,  449,  449,  449,
      449,  449,  449,  228,  216,   41,  449,   41,  449,  151,
      229,  449,  449,  449,  229,  229,  449,  153,  449,  449,
      449,  449,  449,  449,  449,  229,  152,  449,  449,  449,

      152,  152,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  152,   68,  449,   68,  449,  156,  157,  449,  449,
      449,  157,  157,  158,  449,  449,  449,  449,  449,  449,
      449,  449,  157,  159,   68,  449,   68,  449,  234,  235,
      449,  449,  449,  235,  235,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  235,  236,   68,  449,   68,  449,
      238,  239,  449,  449,  449,  239,  239,  240,  449,  449,
      449,  449,  449,  449,  449,  449,  239,  241,  243,  244,
      449,  449,  449,  244,  244,  245,  449,  449,  449,  449,
      449,  449,  449,  449,  244,   95,  449,  449,  449,   95,

       95,  449,  449,  449,  449,  449,  449,  449,  449,  449,
       95,   68,  449,   68,  449,  234,  246,  449,  449,  449,
      246,  246,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  246,  236,   68,  449,   68,  449,  238,  239,  449,
      449,  449,  239,  239,  240,  449,  449,  449,  449,  449,
      449,  449,  449,  239,  241,  164,  247,  449,  449,  449,
      247,  247,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  247,  165,  449,  449,  449,  165,  165,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  165,  172,  449,
      449,  449,  172,  172,  449,  449,  449,  449,  449,  449,

      449,  449,  449,  172,   23,  449,   23,  253,  254,  255,
      449,  449,  449,  255,  255,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  255,  101,  449,  101,  258,  259,
      260,  449,  449,  449,  260,  260,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  260,  261,   23,  449,   23,
      263,  264,  265,  449,  449,  449,  265,  265,  266,  449,
      449,  449,  449,  449,  449,  449,  449,  265,   23,  449,
       23,  181,  182,  183,  449,  449,  449,  183,  183,  184,
      449,  449,  449,  449,  449,  449,  449,  449,  183,   23,
      449,   23,  181,  182,  183,  449,  449,  449,  183,  183,

      184,  449,  449,  449,  449,  449,  449,  449,  267,  183,
       23,  449,   23,  253,  254,  268,  449,  449,  449,  268,
      268,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      268,   23,  449,   23,  263,  264,  265,  449,  449,  449,
      265,  265,  266,  449,  449,  449,  449,  449,  449,  449,
      449,  265,  172,  449,  449,  449,  172,  172,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  172,   23,  449,
       23,  111,  112,  113,  449,  449,  449,  113,  113,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  113,  101,
      449,  101,  258,  259,  269,  449,  449,  449,  269,  269,

      449,  449,  449,  449,  449,  449,  449,  449,  449,  269,
      261,   63,  449,   63,  449,   31,  116,  449,  117,  449,
      116,  116,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  116,   63,  449,   63,  449,   78,  270,  449,  191,
      449,  270,  270,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  270,   63,  449,   63,  449,   78,  190,  449,
      191,  449,  190,  190,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  190,  270,  449,  449,  449,  270,  270,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  270,
      196,  449,  449,  449,  196,  196,  449,  449,  449,  449,

      449,  449,  449,  449,  449,  196,  196,  449,  449,  449,
      196,  196,  449,  449,  449,  449,  449,  449,  449,  449,
      271,  196,  200,  449,  449,  449,  200,  200,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  200,  274,  275,
      449,  449,  449,  275,  275,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  275,  203,  204,  449,  449,  449,
      204,  204,  205,  449,  449,  449,  449,  449,  449,  449,
      449,  204,  274,  277,  449,  449,  449,  277,  277,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  277,   68,
      449,   68,  449,  279,  280,  449,  449,  449,  280,  280,

      281,  449,  449,  449,  449,  449,  449,  449,  449,  280,
      282,  200,  449,  449,  449,  200,  200,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  200,  140,  141,  449,
      141,  140,  142,  143,  140,  140,  140,  143,  143,  144,
      145,  140,  140,  140,  140,  140,  140,  140,  143,  146,
      140,  214,  449,  449,  449,  214,  214,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  214,   41,  449,   41,
      449,  287,  288,  449,  449,  449,  288,  288,  449,  289,
      449,  449,  449,  449,  449,  449,  449,  288,  141,  449,
      141,  449,  292,  293,  449,  449,  449,  293,  293,  449,

      294,  449,  449,  449,  449,  449,  449,  449,  293,  295,
       41,  449,   41,  449,  297,  298,  449,  449,  449,  298,
      298,  299,  300,  449,  449,  449,  449,  449,  449,  449,
      298,   41,  449,   41,  449,  224,  225,  449,  449,  449,
      225,  225,  226,  227,  449,  449,  449,  449,  449,  449,
      449,  225,   41,  449,   41,  449,  224,  225,  449,  449,
      449,  225,  225,  226,  227,  449,  449,  449,  449,  449,
      449,  301,  225,   41,  449,   41,  449,  287,  302,  449,
      449,  449,  302,  302,  449,  289,  449,  449,  449,  449,
      449,  449,  449,  302,   41,  449,   41,  449,  297,  298,

      449,  449,  449,  298,  298,  299,  300,  449,  449,  449,
      449,  449,  449,  449,  298,  214,  449,  449,  449,  214,
      214,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      214,   41,  449,   41,  449,  151,  152,  449,  449,  449,
      152,  152,  449,  153,  449,  449,  449,  449,  449,  449,
      449,  152,  141,  449,  141,  449,  292,  303,  449,  449,
      449,  303,  303,  449,  294,  449,  449,  449,  449,  449,
      449,  449,  303,  295,   19,   20,  449,  449,  449,   20,
       20,   21,  449,  449,  304,  449,  449,  449,  449,  449,
       20,   68,  449,   68,  449,  156,  157,  449,  449,  449,

      157,  157,  158,  449,  449,  449,  449,  449,  449,  449,
      449,  157,  159,  235,  449,  449,  449,  235,  235,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  235,  307,
      308,  449,  449,  449,  308,  308,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  308,   68,  449,   68,  449,
      311,  312,  449,  449,  449,  312,  312,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  312,  313,  315,  316,
      449,  449,  449,  316,  316,  317,  449,  449,  449,  449,
      449,  449,  449,  449,  316,  243,  244,  449,  449,  449,
      244,  244,  245,  449,  449,  449,  449,  449,  449,  449,

      449,  244,  243,  244,  449,  449,  449,  244,  244,  245,
      449,  449,  449,  449,  449,  449,  449,  318,  244,  307,
      319,  449,  449,  449,  319,  319,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  319,  315,  316,  449,  449,
      449,  316,  316,  317,  449,  449,  449,  449,  449,  449,
      449,  449,  316,  235,  449,  449,  449,  235,  235,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  235,  164,
      165,  449,  449,  449,  165,  165,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  165,   68,  449,   68,  449,
      311,  320,  449,  449,  449,  320,  320,  449,  449,  449,

      449,  449,  449,  449,  449,  449,  320,  313,   23,  449,
       23,  253,  254,  255,  449,  449,  449,  255,  255,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  255,  268,
      449,  449,  449,  268,  268,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  268,  174,  101,  449,  101,  175,
      176,  177,  174,  174,  174,  177,  177,  178,  174,  174,
      174,  174,  174,  174,  174,  174,  177,  179,  174,  260,
      449,  449,  449,  260,  260,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  260,   23,  449,   23,  324,  325,
      326,  449,  449,  449,  326,  326,  449,  449,  449,  449,

      449,  449,  449,  449,  449,  326,   23,  449,   23,  263,
      264,  265,  449,  449,  449,  265,  265,  266,  449,  449,
      449,  449,  449,  449,  449,  449,  265,   23,  449,   23,
      263,  264,  265,  449,  449,  449,  265,  265,  266,  449,
      449,  449,  449,  449,  449,  449,  327,  265,   23,  449,
       23,  324,  325,  328,  449,  449,  449,  328,  328,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  328,  329,
      101,  449,  101,  330,  331,  332,  329,  329,  329,  332,
      332,  333,  329,  329,  329,  329,  329,  329,  329,  329,
      332,  334,  329,  268,  449,  449,  449,  268,  268,  449,

      449,  449,  449,  449,  449,  449,  449,  449,  268,  260,
      449,  449,  449,  260,  260,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  260,   68,  449,   68,  449,  336,
      337,  449,  449,  449,  337,  337,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  337,  338,  274,  275,  449,
      449,  449,  275,  275,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  275,  277,  449,  449,  449,  277,  277,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  277,
       68,  449,   68,  449,  341,  342,  449,  449,  449,  342,
      342,  343,  449,  449,  449,  449,  449,  449,  449,  449,

      342,  344,  277,  449,  449,  449,  277,  277,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  277,   68,  449,
       68,  449,  279,  280,  449,  449,  449,  280,  280,  281,
      449,  449,  449,  449,  449,  449,  449,  449,  280,  282,
       68,  449,   68,  449,  279,  280,  449,  449,  449,  280,
      280,  281,  449,  449,  449,  449,  449,  449,  449,  345,
      280,  282,   68,  449,   68,  449,  336,  346,  449,  449,
      449,  346,  346,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  346,  338,   68,  449,   68,  449,  341,  342,
      449,  449,  449,  342,  342,  343,  449,  449,  449,  449,

      449,  449,  449,  449,  342,  344,  288,  449,  449,  449,
      288,  288,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  288,  288,  449,  449,  449,  288,  288,  449,  449,
      449,  449,  449,  449,  449,  449,  347,  288,  217,  141,
      449,  141,  217,  218,  219,  217,  217,  217,  219,  219,
      220,  221,  217,  217,  217,  217,  217,  217,  217,  219,
      222,  217,  293,  449,  449,  449,  293,  293,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  293,   41,  449,
       41,  449,  350,  351,  449,  449,  449,  351,  351,  449,
      352,  449,  449,  449,  449,  449,  449,  449,  351,   41,

      449,   41,  449,  350,  354,  449,  449,  449,  354,  354,
      449,  352,  449,  449,  449,  449,  449,  449,  449,  354,
      355,  141,  449,  141,  355,  356,  357,  355,  355,  355,
      357,  357,  358,  359,  355,  355,  355,  355,  355,  355,
      355,  357,  360,  355,  293,  449,  449,  449,  293,  293,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  293,
      361,  449,   19,   20,  449,  449,  449,   20,   20,   21,
      449,  449,  449,  449,  449,  449,  449,  449,   20,  308,
      449,  449,  449,  308,  308,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  308,  308,  449,  449,  449,  308,

      308,  449,  449,  449,  449,  449,  449,  449,  449,  362,
      308,  312,  449,  449,  449,  312,  312,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  312,  365,  366,  449,
      449,  449,  366,  366,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  366,  365,  368,  449,  449,  449,  368,
      368,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      368,   68,  449,   68,  449,  370,  371,  449,  449,  449,
      371,  371,  372,  449,  449,  449,  449,  449,  449,  449,
      449,  371,  373,  312,  449,  449,  449,  312,  312,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  312,  101,

      449,  101,  375,  376,  377,  449,  449,  449,  377,  377,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  377,
      378,  326,  449,  449,  449,  326,  326,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  326,  326,  449,  449,
      449,  326,  326,  449,  449,  449,  449,  449,  449,  449,
      449,  379,  326,  380,  101,  449,  101,  381,  382,  383,
      380,  380,  380,  383,  383,  384,  380,  380,  380,  380,
      380,  380,  380,  380,  383,  385,  380,  101,  449,  101,
      375,  376,  387,  449,  449,  449,  387,  387,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  387,  378,   23,

      449,   23,  181,  182,  183,  449,  449,  449,  183,  183,
      184,  449,  449,  449,  449,  449,  449,  449,  449,  183,
      337,  449,  449,  449,  337,  337,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  337,  337,  449,  449,  449,
      337,  337,  449,  449,  449,  449,  449,  449,  449,  449,
      388,  337,   68,  449,   68,  449,  390,  391,  449,  449,
      449,  391,  391,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  391,  392,   68,  449,   68,  449,  390,  394,
      449,  449,  449,  394,  394,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  394,  392,  141,  449,  141,  449,

      396,  397,  449,  449,  449,  397,  397,  449,  398,  449,
      449,  449,  449,  449,  449,  449,  397,  399,  351,  449,
      449,  449,  351,  351,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  351,  351,  449,  449,  449,  351,  351,
      449,  449,  449,  449,  449,  449,  449,  449,  400,  351,
      401,  141,  449,  141,  401,  402,  403,  401,  401,  401,
      403,  403,  404,  405,  401,  401,  401,  401,  401,  401,
      401,  403,  406,  401,  141,  449,  141,  449,  396,  408,
      449,  449,  449,  408,  408,  449,  398,  449,  449,  449,
      449,  449,  449,  449,  408,  399,   41,  449,   41,  449,

      224,  225,  449,  449,  449,  225,  225,  226,  227,  449,
      449,  449,  449,  449,  449,  449,  225,   68,  449,   68,
      449,  411,  412,  449,  449,  449,  412,  412,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  412,  413,  366,
      449,  449,  449,  366,  366,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  366,  366,  449,  449,  449,  366,
      366,  449,  449,  449,  449,  449,  449,  449,  449,  414,
      366,   68,  449,   68,  449,  416,  417,  449,  449,  449,
      417,  417,  418,  449,  449,  449,  449,  449,  449,  449,
      449,  417,  419,   68,  449,   68,  449,  370,  371,  449,

      449,  449,  371,  371,  372,  449,  449,  449,  449,  449,
      449,  449,  449,  371,  373,   68,  449,   68,  449,  411,
      421,  449,  449,  449,  421,  421,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  421,  413,   68,  449,   68,
      449,  416,  417,  449,  449,  449,  417,  417,  418,  449,
      449,  449,  449,  449,  449,  449,  449,  417,  419,  243,
      244,  449,  449,  449,  244,  244,  245,  449,  449,  449,
      449,  449,  449,  449,  449,  244,  377,  449,  449,  449,
      377,  377,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  377,  377,  449,  449,  449,  377,  377,  449,  449,

      449,  449,  449,  449,  449,  449,  422,  377,   23,  449,
       23,  253,  254,  255,  449,  449,  449,  255,  255,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  255,  101,
      449,  101,  424,  425,  426,  449,  449,  449,  426,  426,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  426,
      427,  101,  449,  101,  424,  425,  429,  449,  449,  449,
      429,  429,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  429,  427,   23,  449,   23,  263,  264,  265,  449,
      449,  449,  265,  265,  266,  449,  449,  449,  449,  449,
      449,  449,  449,  265,  391,  449,  449,  449,  391,  391,

      449,  449,  449,  449,  449,  449,  449,  449,  449,  391,
      391,  449,  449,  449,  391,  391,  449,  449,  449,  449,
      449,  449,  449,  449,  430,  391,  397,  449,  449,  449,
      397,  397,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  397,  397,  449,  449,  449,  397,  397,  449,  449,
      449,  449,  449,  449,  449,  449,  431,  397,   41,  449,
       41,  449,  287,  288,  449,  449,  449,  288,  288,  449,
      289,  449,  449,  449,  449,  449,  449,  449,  288,  141,
      449,  141,  449,  433,  434,  449,  449,  449,  434,  434,
      449,  435,  449,  449,  449,  449,  449,  449,  449,  434,

      436,  141,  449,  141,  449,  433,  438,  449,  449,  449,
      438,  438,  449,  435,  449,  449,  449,  449,  449,  449,
      449,  438,  436,   41,  449,   41,  449,  297,  298,  449,
      449,  449,  298,  298,  299,  300,  449,  449,  449,  449,
      449,  449,  449,  298,  412,  449,  449,  449,  412,  412,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  412,
      412,  449,  449,  449,  412,  412,  449,  449,  449,  449,
      449,  449,  449,  449,  439,  412,  308,  449,  449,  449,
      308,  308,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  308,   68,  449,   68,  449,  441,  442,  449,  449,

      449,  442,  442,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  442,  443,   68,  449,   68,  449,  441,  445,
      449,  449,  449,  445,  445,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  445,  443,  315,  316,  449,  449,
      449,  316,  316,  317,  449,  449,  449,  449,  449,  449,
      449,  449,  316,  426,  449,  449,  449,  426,  426,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  426,  426,
      449,  449,  449,  426,  426,  449,  449,  449,  449,  449,
      449,  449,  449,  446,  426,   23,  449,   23,  324,  325,
      326,  449,  449,  449,  326,  326,  449,  449,  449,  449,

      449,  449,  449,  449,  449,  326,  434,  449,  449,  449,
      434,  434,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  434,  434,  449,  449,  449,  434,  434,  449,  449,
      449,  449,  449,  449,  449,  449,  447,  434,  442,  449,
      449,  449,  442,  442,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  442,  442,  449,  449,  449,  442,  442,
      449,  449,  449,  449,  449,  449,  449,  449,  448,  442,
       18,  449,  449,   18,   22,   22,  449,   22,   30,  449,
      449,   30,   36,  449,  449,   36,   40,   40,  449,   40,
       47,  449,  449,   47,   23,   23,  449,   23,   53,   53,

      449,   53,   57,   57,  449,   57,   62,   62,  449,   62,
       67,   67,  449,   67,   77,  449,  449,   77,   41,   41,
      449,   41,   82,   82,  449,   82,   86,   86,  449,   86,
       93,  449,  449,   93,   96,  449,  449,   96,  110,  110,
      449,  110,   63,   63,  115,  115,  449,  115,  118,  118,
      449,  118,   68,   68,  449,   68,  124,  124,  449,  124,
      128,  128,  449,  128,  133,  449,  449,  133,  150,  150,
      449,  150,  155,  155,  449,  155,  163,  449,  449,  163,
      101,  101,  449,  101,  169,  169,  449,  169,  180,  180,
      449,  180,  189,  189,  449,  189,  192,  449,  449,  192,

      194,  449,  449,  194,  198,  198,  449,  198,  202,  449,
      449,  202,  141,  141,  449,  141,  212,  212,  449,  212,
      223,  223,  449,  223,  233,  233,  449,  233,  237,  237,
      449,  237,  242,  449,  449,  242,   68,   68,  449,   68,
      249,  249,  449,  249,  252,  252,  449,  252,  257,  257,
      449,  257,  262,  262,  449,  262,  180,  180,  449,  180,
      110,  110,  449,  110,  115,  115,  449,  115,  189,  189,
      449,  189,  192,  449,  449,  192,  273,  449,  449,  273,
      278,  278,  449,  278,  283,  283,  449,  283,  286,  286,
      449,  286,  291,  291,  449,  291,  296,  296,  449,  296,

      223,  223,  449,  223,  150,  150,  449,  150,   18,  449,
      449,   18,  155,  155,  449,  155,  306,  449,  449,  306,
      310,  310,  449,  310,  314,  449,  449,  314,  242,  449,
      449,  242,  163,  449,  449,  163,  249,  249,  449,  249,
      323,  323,  449,  323,  262,  262,  449,  262,  335,  335,
      449,  335,  340,  340,  449,  340,  278,  278,  449,  278,
      283,  283,  449,  283,  349,  349,  449,  349,  364,  449,
      449,  364,  369,  369,  449,  369,  374,  374,  449,  374,
      180,  180,  449,  180,  389,  389,  449,  389,  395,  395,
      449,  395,  223,  223,  449,  223,  409,  449,  449,  409,

      410,  410,  449,  410,  415,  415,  449,  415,  242,  449,
      449,  242,  252,  252,  449,  252,  423,  423,  449,  423,
      262,  262,  449,  262,  286,  286,  449,  286,  432,  432,
      449,  432,  296,  296,  449,  296,  440,  440,  449,  440,
      314,  449,  449,  314,  323,  323,  449,  323,    3,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449
    } ;

static const flex_int16_t yy_chk[4674] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    4,    4,   15,   12,  141,    4,
        4,    4,   12,  448,   10,   15,   18,  141,   10,   15,
        4,    7,   24,    7,    7,    7,    7,   10,  447,   18,
        7,    7,    7,   45,  101,   24,  446,  167,   46,  167,
      167,    7,    8,    8,    8,  443,   45,    8,    8,    8,
       46,   46,  101,   91,  154,  439,  436,    8,    8,    9,
        9,  154,  435,   91,    9,    9,   91,  154,  210,  249,
      210,  249,  249,  431,  430,    9,   11,   11,  424,  422,

      210,   11,   11,  283,  416,  283,  402,  398,  388,  382,
      375,  370,   11,   13,   13,  283,  359,  356,   13,   13,
       13,  345,  341,  338,  331,  330,  315,  311,  297,   13,
       14,  292,   14,  289,   14,   14,  274,  266,  259,   14,
       14,   14,   14,  254,  253,  238,  234,  218,  213,  209,
       14,   17,   17,  203,  199,  176,   17,   17,   17,  171,
      166,  164,  156,  151,  142,  134,  129,   17,   21,   21,
      125,  114,  112,   21,   21,   21,  103,   97,   94,   87,
       85,   83,   78,   69,   21,   22,   68,   22,   22,   22,
       22,   63,   59,   55,   22,   22,   22,   54,   48,   42,

       41,   37,   35,   25,   23,   22,   26,   19,   26,   26,
       26,   26,    3,    0,    0,   26,   26,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   26,   27,    0,   27,
       27,   27,   27,    0,    0,    0,   27,   27,   27,    0,
        0,    0,    0,    0,    0,    0,    0,   27,   28,    0,
       28,    0,   28,   28,    0,   28,    0,   28,   28,   28,
        0,    0,    0,    0,    0,    0,    0,    0,   28,   29,
        0,   29,    0,   29,   29,    0,    0,    0,   29,   29,
       29,    0,    0,    0,    0,    0,    0,    0,    0,   29,
       29,   30,    0,    0,    0,   30,   30,    0,    0,    0,

        0,    0,    0,    0,    0,    0,   30,   31,    0,    0,
        0,   31,   31,    0,    0,    0,    0,    0,    0,    0,
        0,   31,   31,   38,   38,    0,    0,    0,   38,   38,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   38,
       40,    0,   40,    0,   40,   40,    0,    0,    0,   40,
       40,   40,   40,    0,    0,    0,    0,    0,    0,    0,
       40,   43,    0,   43,    0,   43,   43,    0,    0,    0,
       43,   43,    0,   43,    0,    0,    0,    0,    0,    0,
        0,   43,   44,    0,   44,    0,   44,   44,    0,    0,
        0,   44,   44,   44,   44,    0,    0,    0,    0,    0,

        0,    0,   44,   47,   47,    0,    0,    0,   47,   47,
       47,    0,    0,    0,    0,    0,    0,    0,    0,   47,
       49,   49,    0,    0,    0,   49,   49,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   49,   50,   50,    0,
        0,    0,   50,   50,   50,    0,    0,    0,    0,    0,
        0,    0,    0,   50,   52,   52,    0,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   53,    0,
       53,   53,   53,   53,    0,    0,    0,   53,   53,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   53,   56,

        0,    0,    0,   56,   56,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   56,   57,    0,   57,   57,   57,
       57,    0,    0,    0,   57,   57,   57,    0,    0,    0,
        0,    0,    0,    0,    0,   57,   60,    0,   60,   60,
       60,   60,    0,    0,    0,   60,   60,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   60,   62,    0,   62,
        0,   62,   62,    0,   62,    0,   62,   62,   62,    0,
        0,    0,    0,    0,    0,    0,    0,   62,   64,    0,
       64,    0,   64,   64,    0,   64,    0,   64,   64,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   64,   66,

        0,   66,    0,   66,   66,    0,   66,    0,   66,   66,
       66,    0,    0,    0,    0,    0,    0,    0,    0,   66,
       67,    0,   67,    0,   67,   67,    0,    0,    0,   67,
       67,   67,    0,    0,    0,    0,    0,    0,    0,    0,
       67,   67,   70,    0,   70,    0,   70,   70,    0,    0,
        0,   70,   70,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   70,   70,   71,    0,   71,    0,   71,   71,
        0,    0,    0,   71,   71,   71,    0,    0,    0,    0,
        0,    0,    0,    0,   71,   71,   72,   72,    0,    0,
        0,   72,   72,   72,    0,    0,    0,    0,    0,    0,

        0,    0,   72,   74,    0,   74,    0,   74,   74,    0,
        0,    0,   74,   74,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   74,   74,   76,    0,   76,    0,   76,
       76,    0,    0,    0,   76,   76,   76,    0,    0,    0,
        0,    0,    0,    0,    0,   76,   76,   77,   77,    0,
        0,    0,   77,   77,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   77,   79,    0,    0,    0,   79,   79,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   79,
       81,   81,    0,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,

       81,   81,   81,   81,   82,    0,   82,    0,   82,   82,
        0,    0,    0,   82,   82,    0,   82,    0,    0,    0,
        0,    0,    0,    0,   82,   84,    0,    0,    0,   84,
       84,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       84,   86,    0,   86,    0,   86,   86,    0,    0,    0,
       86,   86,   86,   86,    0,    0,    0,    0,    0,    0,
        0,   86,   88,    0,   88,    0,   88,   88,    0,    0,
        0,   88,   88,    0,   88,    0,    0,    0,    0,    0,
        0,    0,   88,   92,    0,   92,    0,   92,   92,    0,
        0,    0,   92,   92,   92,    0,    0,    0,    0,    0,

        0,    0,    0,   92,   92,   93,   93,    0,    0,    0,
       93,   93,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   93,   95,    0,    0,    0,   95,   95,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   95,   96,   96,
        0,    0,    0,   96,   96,   96,    0,    0,    0,    0,
        0,    0,    0,    0,   96,   98,   98,    0,    0,    0,
       98,   98,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   98,  104,    0,  104,  104,  104,  104,    0,    0,
        0,  104,  104,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  104,  104,  105,  105,    0,  105,  105,  105,

      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  106,    0,
      106,  106,  106,  106,    0,    0,    0,  106,  106,  106,
        0,    0,    0,    0,    0,    0,    0,    0,  106,  107,
        0,    0,    0,  107,  107,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  107,  108,    0,  108,  108,  108,
      108,    0,    0,    0,  108,  108,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  108,  108,  110,    0,  110,
      110,  110,  110,    0,    0,    0,  110,  110,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  110,  113,    0,

        0,    0,  113,  113,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  113,  115,    0,  115,    0,  115,  115,
        0,  115,    0,  115,  115,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  115,  116,    0,    0,    0,  116,
      116,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      116,  118,    0,  118,    0,  118,  118,    0,  118,    0,
      118,  118,  118,    0,    0,    0,    0,    0,    0,    0,
        0,  118,  119,    0,  119,    0,  119,  119,    0,  119,
        0,  119,  119,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  119,  126,    0,    0,    0,  126,  126,    0,

        0,    0,    0,    0,    0,    0,    0,    0,  126,  127,
      127,    0,    0,    0,  127,  127,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  127,  130,    0,  130,    0,
      130,  130,    0,    0,    0,  130,  130,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  130,  130,  132,  132,
        0,    0,    0,  132,  132,  132,    0,    0,    0,    0,
        0,    0,    0,    0,  132,  133,  133,    0,    0,    0,
      133,  133,  133,    0,    0,    0,    0,    0,    0,    0,
        0,  133,  135,  135,    0,    0,    0,  135,  135,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  135,  136,

      136,    0,    0,    0,  136,  136,  136,    0,    0,    0,
        0,    0,    0,    0,    0,  136,  137,    0,    0,    0,
      137,  137,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  137,  138,    0,    0,    0,  138,  138,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  138,  139,    0,
      139,    0,  139,  139,    0,    0,    0,  139,  139,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  139,  139,
      143,    0,  143,    0,  143,  143,    0,    0,    0,  143,
      143,    0,  143,    0,    0,    0,    0,    0,    0,    0,
      143,  143,  144,  144,    0,  144,  144,  144,  144,  144,

      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  146,    0,  146,    0,
      146,  146,    0,    0,    0,  146,  146,  146,  146,    0,
        0,    0,    0,    0,    0,    0,  146,  147,    0,    0,
        0,  147,  147,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  147,  148,    0,  148,    0,  148,  148,    0,
        0,    0,  148,  148,    0,  148,    0,    0,    0,    0,
        0,    0,    0,  148,  148,  150,    0,  150,    0,  150,
      150,    0,    0,    0,  150,  150,    0,  150,    0,    0,
        0,    0,    0,    0,    0,  150,  152,    0,    0,    0,

      152,  152,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  152,  155,    0,  155,    0,  155,  155,    0,    0,
        0,  155,  155,  155,    0,    0,    0,    0,    0,    0,
        0,    0,  155,  155,  157,    0,  157,    0,  157,  157,
        0,    0,    0,  157,  157,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  157,  157,  158,    0,  158,    0,
      158,  158,    0,    0,    0,  158,  158,  158,    0,    0,
        0,    0,    0,    0,    0,    0,  158,  158,  159,  159,
        0,    0,    0,  159,  159,  159,    0,    0,    0,    0,
        0,    0,    0,    0,  159,  160,    0,    0,    0,  160,

      160,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      160,  161,    0,  161,    0,  161,  161,    0,    0,    0,
      161,  161,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  161,  161,  162,    0,  162,    0,  162,  162,    0,
        0,    0,  162,  162,  162,    0,    0,    0,    0,    0,
        0,    0,    0,  162,  162,  163,  163,    0,    0,    0,
      163,  163,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  163,  165,    0,    0,    0,  165,  165,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  165,  172,    0,
        0,    0,  172,  172,    0,    0,    0,    0,    0,    0,

        0,    0,    0,  172,  173,    0,  173,  173,  173,  173,
        0,    0,    0,  173,  173,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  173,  177,    0,  177,  177,  177,
      177,    0,    0,    0,  177,  177,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  177,  177,  179,    0,  179,
      179,  179,  179,    0,    0,    0,  179,  179,  179,    0,
        0,    0,    0,    0,    0,    0,    0,  179,  180,    0,
      180,  180,  180,  180,    0,    0,    0,  180,  180,  180,
        0,    0,    0,    0,    0,    0,    0,    0,  180,  182,
        0,  182,  182,  182,  182,    0,    0,    0,  182,  182,

      182,    0,    0,    0,    0,    0,    0,    0,  182,  182,
      183,    0,  183,  183,  183,  183,    0,    0,    0,  183,
      183,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      183,  184,    0,  184,  184,  184,  184,    0,    0,    0,
      184,  184,  184,    0,    0,    0,    0,    0,    0,    0,
        0,  184,  185,    0,    0,    0,  185,  185,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  185,  186,    0,
      186,  186,  186,  186,    0,    0,    0,  186,  186,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  186,  187,
        0,  187,  187,  187,  187,    0,    0,    0,  187,  187,

        0,    0,    0,    0,    0,    0,    0,    0,    0,  187,
      187,  188,    0,  188,    0,  188,  188,    0,  188,    0,
      188,  188,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  188,  189,    0,  189,    0,  189,  189,    0,  189,
        0,  189,  189,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  189,  190,    0,  190,    0,  190,  190,    0,
      190,    0,  190,  190,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  190,  191,    0,    0,    0,  191,  191,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  191,
      194,    0,    0,    0,  194,  194,    0,    0,    0,    0,

        0,    0,    0,    0,    0,  194,  195,    0,    0,    0,
      195,  195,    0,    0,    0,    0,    0,    0,    0,    0,
      195,  195,  200,    0,    0,    0,  200,  200,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  200,  201,  201,
        0,    0,    0,  201,  201,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  201,  202,  202,    0,    0,    0,
      202,  202,  202,    0,    0,    0,    0,    0,    0,    0,
        0,  202,  204,  204,    0,    0,    0,  204,  204,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  204,  206,
        0,  206,    0,  206,  206,    0,    0,    0,  206,  206,

      206,    0,    0,    0,    0,    0,    0,    0,    0,  206,
      206,  208,    0,    0,    0,  208,  208,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  208,  211,  211,    0,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  214,    0,    0,    0,  214,  214,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  214,  216,    0,  216,
        0,  216,  216,    0,    0,    0,  216,  216,    0,  216,
        0,    0,    0,    0,    0,    0,    0,  216,  219,    0,
      219,    0,  219,  219,    0,    0,    0,  219,  219,    0,

      219,    0,    0,    0,    0,    0,    0,    0,  219,  219,
      222,    0,  222,    0,  222,  222,    0,    0,    0,  222,
      222,  222,  222,    0,    0,    0,    0,    0,    0,    0,
      222,  223,    0,  223,    0,  223,  223,    0,    0,    0,
      223,  223,  223,  223,    0,    0,    0,    0,    0,    0,
        0,  223,  224,    0,  224,    0,  224,  224,    0,    0,
        0,  224,  224,  224,  224,    0,    0,    0,    0,    0,
        0,  224,  224,  225,    0,  225,    0,  225,  225,    0,
        0,    0,  225,  225,    0,  225,    0,    0,    0,    0,
        0,    0,    0,  225,  226,    0,  226,    0,  226,  226,

        0,    0,    0,  226,  226,  226,  226,    0,    0,    0,
        0,    0,    0,    0,  226,  228,    0,    0,    0,  228,
      228,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      228,  229,    0,  229,    0,  229,  229,    0,    0,    0,
      229,  229,    0,  229,    0,    0,    0,    0,    0,    0,
        0,  229,  230,    0,  230,    0,  230,  230,    0,    0,
        0,  230,  230,    0,  230,    0,    0,    0,    0,    0,
        0,    0,  230,  230,  231,  231,    0,    0,    0,  231,
      231,  231,    0,    0,  231,    0,    0,    0,    0,    0,
      231,  232,    0,  232,    0,  232,  232,    0,    0,    0,

      232,  232,  232,    0,    0,    0,    0,    0,    0,    0,
        0,  232,  232,  235,    0,    0,    0,  235,  235,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  235,  236,
      236,    0,    0,    0,  236,  236,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  236,  239,    0,  239,    0,
      239,  239,    0,    0,    0,  239,  239,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  239,  239,  241,  241,
        0,    0,    0,  241,  241,  241,    0,    0,    0,    0,
        0,    0,    0,    0,  241,  242,  242,    0,    0,    0,
      242,  242,  242,    0,    0,    0,    0,    0,    0,    0,

        0,  242,  243,  243,    0,    0,    0,  243,  243,  243,
        0,    0,    0,    0,    0,    0,    0,  243,  243,  244,
      244,    0,    0,    0,  244,  244,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  244,  245,  245,    0,    0,
        0,  245,  245,  245,    0,    0,    0,    0,    0,    0,
        0,    0,  245,  246,    0,    0,    0,  246,  246,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  246,  247,
      247,    0,    0,    0,  247,  247,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  247,  248,    0,  248,    0,
      248,  248,    0,    0,    0,  248,  248,    0,    0,    0,

        0,    0,    0,    0,    0,    0,  248,  248,  252,    0,
      252,  252,  252,  252,    0,    0,    0,  252,  252,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  252,  255,
        0,    0,    0,  255,  255,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  255,  256,  256,    0,  256,  256,
      256,  256,  256,  256,  256,  256,  256,  256,  256,  256,
      256,  256,  256,  256,  256,  256,  256,  256,  256,  260,
        0,    0,    0,  260,  260,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  260,  261,    0,  261,  261,  261,
      261,    0,    0,    0,  261,  261,    0,    0,    0,    0,

        0,    0,    0,    0,    0,  261,  262,    0,  262,  262,
      262,  262,    0,    0,    0,  262,  262,  262,    0,    0,
        0,    0,    0,    0,    0,    0,  262,  264,    0,  264,
      264,  264,  264,    0,    0,    0,  264,  264,  264,    0,
        0,    0,    0,    0,    0,    0,  264,  264,  265,    0,
      265,  265,  265,  265,    0,    0,    0,  265,  265,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  265,  267,
      267,    0,  267,  267,  267,  267,  267,  267,  267,  267,
      267,  267,  267,  267,  267,  267,  267,  267,  267,  267,
      267,  267,  267,  268,    0,    0,    0,  268,  268,    0,

        0,    0,    0,    0,    0,    0,    0,    0,  268,  269,
        0,    0,    0,  269,  269,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  269,  271,    0,  271,    0,  271,
      271,    0,    0,    0,  271,  271,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  271,  271,  273,  273,    0,
        0,    0,  273,  273,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  273,  275,    0,    0,    0,  275,  275,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  275,
      276,    0,  276,    0,  276,  276,    0,    0,    0,  276,
      276,  276,    0,    0,    0,    0,    0,    0,    0,    0,

      276,  276,  277,    0,    0,    0,  277,  277,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  277,  278,    0,
      278,    0,  278,  278,    0,    0,    0,  278,  278,  278,
        0,    0,    0,    0,    0,    0,    0,    0,  278,  278,
      279,    0,  279,    0,  279,  279,    0,    0,    0,  279,
      279,  279,    0,    0,    0,    0,    0,    0,    0,  279,
      279,  279,  280,    0,  280,    0,  280,  280,    0,    0,
        0,  280,  280,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  280,  280,  281,    0,  281,    0,  281,  281,
        0,    0,    0,  281,  281,  281,    0,    0,    0,    0,

        0,    0,    0,    0,  281,  281,  286,    0,    0,    0,
      286,  286,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  286,  287,    0,    0,    0,  287,  287,    0,    0,
        0,    0,    0,    0,    0,    0,  287,  287,  290,  290,
        0,  290,  290,  290,  290,  290,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  290,  290,  290,
      290,  290,  293,    0,    0,    0,  293,  293,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  293,  295,    0,
      295,    0,  295,  295,    0,    0,    0,  295,  295,    0,
      295,    0,    0,    0,    0,    0,    0,    0,  295,  298,

        0,  298,    0,  298,  298,    0,    0,    0,  298,  298,
        0,  298,    0,    0,    0,    0,    0,    0,    0,  298,
      301,  301,    0,  301,  301,  301,  301,  301,  301,  301,
      301,  301,  301,  301,  301,  301,  301,  301,  301,  301,
      301,  301,  301,  301,  303,    0,    0,    0,  303,  303,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  303,
      304,    0,  304,  304,    0,    0,    0,  304,  304,  304,
        0,    0,    0,    0,    0,    0,    0,    0,  304,  306,
        0,    0,    0,  306,  306,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  306,  307,    0,    0,    0,  307,

      307,    0,    0,    0,    0,    0,    0,    0,    0,  307,
      307,  312,    0,    0,    0,  312,  312,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  312,  313,  313,    0,
        0,    0,  313,  313,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  313,  316,  316,    0,    0,    0,  316,
      316,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      316,  318,    0,  318,    0,  318,  318,    0,    0,    0,
      318,  318,  318,    0,    0,    0,    0,    0,    0,    0,
        0,  318,  318,  320,    0,    0,    0,  320,  320,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  320,  321,

        0,  321,  321,  321,  321,    0,    0,    0,  321,  321,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  321,
      321,  323,    0,    0,    0,  323,  323,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  323,  325,    0,    0,
        0,  325,  325,    0,    0,    0,    0,    0,    0,    0,
        0,  325,  325,  327,  327,    0,  327,  327,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      327,  327,  327,  327,  327,  327,  327,  332,    0,  332,
      332,  332,  332,    0,    0,    0,  332,  332,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  332,  332,  334,

        0,  334,  334,  334,  334,    0,    0,    0,  334,  334,
      334,    0,    0,    0,    0,    0,    0,    0,    0,  334,
      335,    0,    0,    0,  335,  335,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  335,  336,    0,    0,    0,
      336,  336,    0,    0,    0,    0,    0,    0,    0,    0,
      336,  336,  339,    0,  339,    0,  339,  339,    0,    0,
        0,  339,  339,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  339,  339,  342,    0,  342,    0,  342,  342,
        0,    0,    0,  342,  342,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  342,  342,  347,    0,  347,    0,

      347,  347,    0,    0,    0,  347,  347,    0,  347,    0,
        0,    0,    0,    0,    0,    0,  347,  347,  349,    0,
        0,    0,  349,  349,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  349,  350,    0,    0,    0,  350,  350,
        0,    0,    0,    0,    0,    0,    0,    0,  350,  350,
      353,  353,    0,  353,  353,  353,  353,  353,  353,  353,
      353,  353,  353,  353,  353,  353,  353,  353,  353,  353,
      353,  353,  353,  353,  357,    0,  357,    0,  357,  357,
        0,    0,    0,  357,  357,    0,  357,    0,    0,    0,
        0,    0,    0,    0,  357,  357,  360,    0,  360,    0,

      360,  360,    0,    0,    0,  360,  360,  360,  360,    0,
        0,    0,    0,    0,    0,    0,  360,  362,    0,  362,
        0,  362,  362,    0,    0,    0,  362,  362,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  362,  362,  364,
        0,    0,    0,  364,  364,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  364,  365,    0,    0,    0,  365,
      365,    0,    0,    0,    0,    0,    0,    0,    0,  365,
      365,  367,    0,  367,    0,  367,  367,    0,    0,    0,
      367,  367,  367,    0,    0,    0,    0,    0,    0,    0,
        0,  367,  367,  369,    0,  369,    0,  369,  369,    0,

        0,    0,  369,  369,  369,    0,    0,    0,    0,    0,
        0,    0,    0,  369,  369,  371,    0,  371,    0,  371,
      371,    0,    0,    0,  371,  371,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  371,  371,  372,    0,  372,
        0,  372,  372,    0,    0,    0,  372,  372,  372,    0,
        0,    0,    0,    0,    0,    0,    0,  372,  372,  373,
      373,    0,    0,    0,  373,  373,  373,    0,    0,    0,
        0,    0,    0,    0,    0,  373,  374,    0,    0,    0,
      374,  374,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  374,  376,    0,    0,    0,  376,  376,    0,    0,

        0,    0,    0,    0,    0,    0,  376,  376,  378,    0,
      378,  378,  378,  378,    0,    0,    0,  378,  378,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  378,  379,
        0,  379,  379,  379,  379,    0,    0,    0,  379,  379,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  379,
      379,  383,    0,  383,  383,  383,  383,    0,    0,    0,
      383,  383,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  383,  383,  385,    0,  385,  385,  385,  385,    0,
        0,    0,  385,  385,  385,    0,    0,    0,    0,    0,
        0,    0,    0,  385,  389,    0,    0,    0,  389,  389,

        0,    0,    0,    0,    0,    0,    0,    0,    0,  389,
      390,    0,    0,    0,  390,  390,    0,    0,    0,    0,
        0,    0,    0,    0,  390,  390,  395,    0,    0,    0,
      395,  395,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  395,  396,    0,    0,    0,  396,  396,    0,    0,
        0,    0,    0,    0,    0,    0,  396,  396,  399,    0,
      399,    0,  399,  399,    0,    0,    0,  399,  399,    0,
      399,    0,    0,    0,    0,    0,    0,    0,  399,  400,
        0,  400,    0,  400,  400,    0,    0,    0,  400,  400,
        0,  400,    0,    0,    0,    0,    0,    0,    0,  400,

      400,  403,    0,  403,    0,  403,  403,    0,    0,    0,
      403,  403,    0,  403,    0,    0,    0,    0,    0,    0,
        0,  403,  403,  406,    0,  406,    0,  406,  406,    0,
        0,    0,  406,  406,  406,  406,    0,    0,    0,    0,
        0,    0,    0,  406,  410,    0,    0,    0,  410,  410,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  410,
      411,    0,    0,    0,  411,  411,    0,    0,    0,    0,
        0,    0,    0,    0,  411,  411,  413,    0,    0,    0,
      413,  413,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  413,  414,    0,  414,    0,  414,  414,    0,    0,

        0,  414,  414,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  414,  414,  417,    0,  417,    0,  417,  417,
        0,    0,    0,  417,  417,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  417,  417,  419,  419,    0,    0,
        0,  419,  419,  419,    0,    0,    0,    0,    0,    0,
        0,    0,  419,  423,    0,    0,    0,  423,  423,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  423,  425,
        0,    0,    0,  425,  425,    0,    0,    0,    0,    0,
        0,    0,    0,  425,  425,  427,    0,  427,  427,  427,
      427,    0,    0,    0,  427,  427,    0,    0,    0,    0,

        0,    0,    0,    0,    0,  427,  432,    0,    0,    0,
      432,  432,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  432,  433,    0,    0,    0,  433,  433,    0,    0,
        0,    0,    0,    0,    0,    0,  433,  433,  440,    0,
        0,    0,  440,  440,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  440,  441,    0,    0,    0,  441,  441,
        0,    0,    0,    0,    0,    0,    0,    0,  441,  441,
      450,    0,    0,  450,  451,  451,    0,  451,  452,    0,
        0,  452,  453,    0,    0,  453,  454,  454,    0,  454,
      455,    0,    0,  455,  456,  456,    0,  456,  457,  457,

        0,  457,  458,  458,    0,  458,  459,  459,    0,  459,
      460,  460,    0,  460,  461,    0,    0,  461,  462,  462,
        0,  462,  463,  463,    0,  463,  464,  464,    0,  464,
      465,    0,    0,  465,  466,    0,    0,  466,  467,  467,
        0,  467,  468,  468,  469,  469,    0,  469,  470,  470,
        0,  470,  471,  471,    0,  471,  472,  472,    0,  472,
      473,  473,    0,  473,  474,    0,    0,  474,  475,  475,
        0,  475,  476,  476,    0,  476,  477,    0,    0,  477,
      478,  478,    0,  478,  479,  479,    0,  479,  480,  480,
        0,  480,  481,  481,    0,  481,  482,    0,    0,  482,

      483,    0,    0,  483,  484,  484,    0,  484,  485,    0,
        0,  485,  486,  486,    0,  486,  487,  487,    0,  487,
      488,  488,    0,  488,  489,  489,    0,  489,  490,  490,
        0,  490,  491,    0,    0,  491,  492,  492,    0,  492,
      493,  493,    0,  493,  494,  494,    0,  494,  495,  495,
        0,  495,  496,  496,    0,  496,  497,  497,    0,  497,
      498,  498,    0,  498,  499,  499,    0,  499,  500,  500,
        0,  500,  501,    0,    0,  501,  502,    0,    0,  502,
      503,  503,    0,  503,  504,  504,    0,  504,  505,  505,
        0,  505,  506,  506,    0,  506,  507,  507,    0,  507,

      508,  508,    0,  508,  509,  509,    0,  509,  510,    0,
        0,  510,  511,  511,    0,  511,  512,    0,    0,  512,
      513,  513,    0,  513,  514,    0,    0,  514,  515,    0,
        0,  515,  516,    0,    0,  516,  517,  517,    0,  517,
      518,  518,    0,  518,  519,  519,    0,  519,  520,  520,
        0,  520,  521,  521,    0,  521,  522,  522,    0,  522,
      523,  523,    0,  523,  524,  524,    0,  524,  525,    0,
        0,  525,  526,  526,    0,  526,  527,  527,    0,  527,
      528,  528,    0,  528,  529,  529,    0,  529,  530,  530,
        0,  530,  531,  531,    0,  531,  532,    0,    0,  532,

      533,  533,    0,  533,  534,  534,    0,  534,  535,    0,
        0,  535,  536,  536,    0,  536,  537,  537,    0,  537,
      538,  538,    0,  538,  539,  539,    0,  539,  540,  540,
        0,  540,  541,  541,    0,  541,  542,  542,    0,  542,
      543,    0,    0,  543,  544,  544,    0,  544,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449,  449,  449
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[20] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#ifndef YYLMAX
#define YYLMAX 8192
#endif

char yytext[YYLMAX];
char *yytext_ptr;
#line 1 "shell.l"
/*
 * CS252: Shell project
 *
 * Template file.
 * You will need to add more code here to execute the command table.
 *
 * NOTE: You are responsible for fixing any bugs this code may have!
 *
 * DO NOT PUT THIS PROJECT IN A PUBLIC REPOSITORY LIKE GIT. IF YOU WANT
 * TO MAKE IT PUBLICALLY AVAILABLE YOU NEED TO REMOVE ANY SKELETON CODE
 * AND REWRITE YOUR PROJECT SO IT IMPLEMENTS FUNCTIONALITY DIFFERENT THAN
 * WHAT IS SPECIFIED IN THE HANDOUT. WE OFTEN REUSE PART OF THE PROJECTS FROM
 * SEMESTER TO SEMESTER AND PUTTING YOUR CODE IN A PUBLIC REPOSITORY
 * MAY FACILITATE ACADEMIC DISHONESTY.
 */
/*
 *
 * CS-252 
 * shell.l: lexical analyzer for shell
 * You have to extend it.
 *
 */
#line 26 "shell.l"

#include <cstring>
#include <fcntl.h>
#include <limits.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <dirent.h>
#include "command.hh"
#include "shell.hh"
#include "y.tab.hh"

//////////// Start added code ///////////

extern "C" char * read_line();

int mygetc(FILE * f) {
  static char *p;
  char ch;

  if (!isatty(0)) {
    // stdin is not a tty. Call real getc
    return getc(f);
  }

  // stdin is a tty. Call our read_line.
  if (p==NULL || *p == 0) {
    char * s = read_line();
    p = s;
  }

  ch = *p;
  p++;

  return ch;
}

#undef getc
#define getc(f) mygetc(f)

/////////// End added code ///////////

static  void yyunput (int c,char *buf_ptr  );

void myunputc(int c) {
  unput(c);
}

#line 1738 "lex.yy.cc"
#line 1739 "lex.yy.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 78 "shell.l"


#line 1959 "lex.yy.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 450 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 4649 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 80 "shell.l"
{
  return NEWLINE;
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 84 "shell.l"
{
  /* Discard spaces and tabs */
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 88 "shell.l"
{
  return GREAT;
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 92 "shell.l"
{
  return LESS;
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 96 "shell.l"
{
  return TWOGREAT;
}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 100 "shell.l"
{
  return AMP;
}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 104 "shell.l"
{
  return GREATAMP;
}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 108 "shell.l"
{
  return GREATGREAT;
}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 112 "shell.l"
{
  return GREATGREATAMP;
}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 116 "shell.l"
{
  return PIPE;
}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 120 "shell.l"
{ // "arg"
  // handle quotes
  std::string arg = std::string(yytext);
  yylval.cpp_string = new std::string(arg.substr(1, arg.length() - 2)); // remove quotes
  return WORD;
}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 127 "shell.l"
{
  // handle escaping
  char* argPtr = yytext;
  char escapedArg[strlen(yytext) + 1];
  int i = 0;
  while (*argPtr) {
    if (*argPtr == '\\') {
      // skip escape character, add next character to escaped argument
      ++argPtr;
      if (*argPtr == 'n') {
        escapedArg[i] = '\n';
      } else if (*argPtr == 't') {
        escapedArg[i] = '\t';
      } else {
        escapedArg[i] = *argPtr;
      }
    } else {
      // add current character to escaped argument
      escapedArg[i] = *argPtr;
    }
    ++i;
    ++argPtr;
  }
  escapedArg[i] = 0;
  yylval.cpp_string = new std::string(escapedArg);
  return WORD;
}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 155 "shell.l"
{
  FILE* file = fopen(yytext + 7, "r");
  if (!file) {
    perror("fopen");
    exit(1);
  }
  std::string cmd;
  while (!feof(file)) {
    cmd += fgetc(file);
  }
  for (int i = cmd.length(); i >= 0; --i) {
    unput(cmd[i]);
  }
}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 171 "shell.l"
{ // $(cmd) or `cmd`
  // create subshell
  std::string cmd = std::string(yytext);
  cmd = cmd.substr(1, cmd.length() - 2); // remove first and last character of the command whether its format is $(cmd) or `cmd`
  if (*yytext == '$') {
    // if the format is $(cmd), remove another character from the front
    cmd = cmd.substr(1);
  }

  // save default input and output to restore at the end
  int defaultin = dup(0);
	int defaultout = dup(1);

  // set up i/o redirection for subshell
  // create pipe to send command from parent to subshell
  int cmdpipe[2];
  if (pipe(cmdpipe) == -1) {
    perror( "pipe");
    exit(1);
  }
  // create pipe to send output from subshell to parent
  int outpipe[2];
  if (pipe(outpipe) == -1) {
    perror( "pipe");
    exit(1);
  }

  // write command to cmdpipe
  write(cmdpipe[1], cmd.c_str(), cmd.length());
  write(cmdpipe[1], "\nexit\n", 6);
  close(cmdpipe[1]);

  // redirect stdin to read end of cmdpipe
  dup2(cmdpipe[0], 0);
  // redirect stdout to write end of outpipe
  dup2(outpipe[1], 1);

  // close redundant file descriptors
  close(cmdpipe[0]);
  close(outpipe[1]);

  // fork process for subshell
  pid_t pid = fork();
  if (pid == -1) {
    perror("fork");
    exit(1);
  } else if (pid == 0) {
    // child
    char* argv[1];
    argv[0] = strdup("/proc/self/exe");
    execvp("/proc/self/exe", argv);
    perror("exec");
    exit(1);
  }

  // restore default input and output
	dup2(defaultin, 0);
	dup2(defaultout, 1);

  // close redundant file descriptors
  close(defaultin);
  close(defaultout);

  // read output from subshell
  char* buf = (char*) calloc(1, 1);
  size_t length = 0;
  char* i = buf;
  while (read(outpipe[0], i, 1)) {
    // read from pipe 1 byte at a time
    ++length;
    char* temp = (char*) calloc(length + 1, 1);
    for (size_t j = 0; j < length; ++j) {
      if (buf[j] == '\n') {
        temp[j] = ' ';
      } else {
        temp[j] = buf[j];
      }
    }
    free(buf);
    buf = temp;
    i = buf + length;
  }

  // put the output back into the buffer backwards
  for (int j = length - 1; j >= 0; --j) {
    unput(buf[j]);
  }

  free(buf);
}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 262 "shell.l"
{ // ${arg}
  // arg is an environment variable, replace it with the real value
  std::string envVar = std::string(yytext);
  int openBraceIdx = envVar.find("${", 0);
  int closeBraceIdx = envVar.find("}", 0);
  envVar = envVar.substr(openBraceIdx + 2, closeBraceIdx - openBraceIdx - 2); // delete first two characters ("${") and last character ("}")
  char* envVarValue;
  char buf[PATH_MAX];
  if (!strcmp(envVar.c_str(), "$")) {
    envVarValue = const_cast<char*>(std::to_string(getpid()).c_str());
  } else if (!strcmp(envVar.c_str(), "?")) {
    envVarValue = const_cast<char*>(std::to_string(Command::prevReturnCode).c_str());
  } else if (!strcmp(envVar.c_str(), "!")) {
    envVarValue = const_cast<char*>(std::to_string(Command::prevBackgroundPid).c_str());
  } else if (!strcmp(envVar.c_str(), "_")) {
    envVarValue = const_cast<char*>(Command::lastArg.c_str());
  } else if (!strcmp(envVar.c_str(), "SHELL")) {
    realpath(Shell::relativePath.c_str(), buf);
    envVarValue = buf;
  } else if (!(envVarValue = getenv(envVar.c_str()))) {
    perror("getenv");
    exit(1);
  }
  int len = strlen(yytext);
  for (int i = len - 1; i >= closeBraceIdx + 1; --i) {
    unput(yytext[i]);
  }
  len = strlen(envVarValue);
  for (int i = len - 1; i >= 0; --i) {
    unput(envVarValue[i]);
  }
  for (int i = openBraceIdx - 1; i >= 0; --i) {
    unput(yytext[i]);
  }
}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 298 "shell.l"
{
  char* dir = getenv("HOME");
  if (strlen(yytext) > 1) {
    for (int i = strlen(yytext) - 1; i > 0; --i) {
      unput(yytext[i]);
    }
    std::string dirString = std::string(dir);
    size_t lastSlashIdx = dirString.find_last_of("/");
    for (int i = lastSlashIdx; i >= 0; --i) {
      unput(dir[i]);
    }
  } else {
    for (int i = strlen(dir); i >= 0; --i) {
      unput(dir[i]);
    }
  }
}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 316 "shell.l"
{
  // add spaces before and after every (unescaped) i/o redirection operator
  std::string ioRedirectionOp = std::string(yytext);

  // just some crazy logic to handle all the different i/o redirection operators as concisely as possible
  for (int i = ioRedirectionOp.length() - 1; i >= 0; --i) {
    if (ioRedirectionOp[i] == '>' || ioRedirectionOp[i] == '<' || ioRedirectionOp[i] == '|' || ioRedirectionOp[i] == '&') {
      if (i - 1 < 0 || ioRedirectionOp[i - 1] != '\\') {
        if ((ioRedirectionOp[i] == '>' && ioRedirectionOp[i - 1] == '>') || (ioRedirectionOp[i] == '<' && ioRedirectionOp[i - 1] == '<')
            || (ioRedirectionOp[i] == '>' && ioRedirectionOp[i - 1] == '2') || (ioRedirectionOp[i] == '&' && ioRedirectionOp[i - 1] == '>')) {
          if (i - 2 < 0 || ioRedirectionOp[i - 2] != '\\') {
            if (ioRedirectionOp[i] == '&' && ioRedirectionOp[i - 1] == '>' && ioRedirectionOp[i - 2] == '>') {
              if (i - 3 < 0 || ioRedirectionOp[i - 3] != '\\') {
                unput(' ');
                unput(ioRedirectionOp[i]);
                unput(ioRedirectionOp[i - 1]);
                unput(ioRedirectionOp[i - 2]);
                unput(' ');
                i -= 2;
              } else {
                unput(ioRedirectionOp[i]);
                unput(ioRedirectionOp[i - 1]);
                unput(ioRedirectionOp[i - 2]);
                i -= 2;
              }
            } else {
              unput(' ');
              unput(ioRedirectionOp[i]);
              unput(ioRedirectionOp[i - 1]);
              unput(' ');
              --i;
            }
          } else {
            unput(ioRedirectionOp[i]);
            unput(ioRedirectionOp[i - 1]);
            --i;
          }
        } else {
          unput(' ');
          unput(ioRedirectionOp[i]);
          unput(' ');
        }
      } else {
        unput(ioRedirectionOp[i]);
      }
    } else {
      unput(ioRedirectionOp[i]);
    }
  }
}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 367 "shell.l"
{
  /* Assume that file names have only alpha chars */
  yylval.cpp_string = new std::string(yytext);
  return WORD;
}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 372 "shell.l"
ECHO;
	YY_BREAK
#line 2378 "lex.yy.cc"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 450 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 450 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 449);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 372 "shell.l"
